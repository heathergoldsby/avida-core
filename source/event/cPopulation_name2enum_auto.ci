int cPopulationEventFactory::EventNameToEnum(const cString & name) const{
  if( name == "" ){
    return cPopulationEventFactory::EVENT_NO_EVENT;
  }else if (name == "exit") {
    return cPopulationEventFactory::EVENT_exit;
  }else if (name == "exit_if_generation_greater_than") {
    return cPopulationEventFactory::EVENT_exit_if_generation_greater_than;
  }else if (name == "exit_if_update_greater_than") {
    return cPopulationEventFactory::EVENT_exit_if_update_greater_than;
  }else if (name == "exit_if_ave_lineage_label_smaller") {
    return cPopulationEventFactory::EVENT_exit_if_ave_lineage_label_smaller;
  }else if (name == "exit_if_ave_lineage_label_larger") {
    return cPopulationEventFactory::EVENT_exit_if_ave_lineage_label_larger;
  }else if (name == "echo") {
    return cPopulationEventFactory::EVENT_echo;
  }else if (name == "print_data") {
    return cPopulationEventFactory::EVENT_print_data;
  }else if (name == "print_average_data") {
    return cPopulationEventFactory::EVENT_print_average_data;
  }else if (name == "print_error_data") {
    return cPopulationEventFactory::EVENT_print_error_data;
  }else if (name == "print_variance_data") {
    return cPopulationEventFactory::EVENT_print_variance_data;
  }else if (name == "print_dominant_data") {
    return cPopulationEventFactory::EVENT_print_dominant_data;
  }else if (name == "print_stats_data") {
    return cPopulationEventFactory::EVENT_print_stats_data;
  }else if (name == "print_count_data") {
    return cPopulationEventFactory::EVENT_print_count_data;
  }else if (name == "print_totals_data") {
    return cPopulationEventFactory::EVENT_print_totals_data;
  }else if (name == "print_tasks_data") {
    return cPopulationEventFactory::EVENT_print_tasks_data;
  }else if (name == "print_tasks_exe_data") {
    return cPopulationEventFactory::EVENT_print_tasks_exe_data;
  }else if (name == "print_resource_data") {
    return cPopulationEventFactory::EVENT_print_resource_data;
  }else if (name == "print_time_data") {
    return cPopulationEventFactory::EVENT_print_time_data;
  }else if (name == "print_mutation_data") {
    return cPopulationEventFactory::EVENT_print_mutation_data;
  }else if (name == "print_mutation_rate_data") {
    return cPopulationEventFactory::EVENT_print_mutation_rate_data;
  }else if (name == "print_divide_mut_data") {
    return cPopulationEventFactory::EVENT_print_divide_mut_data;
  }else if (name == "print_dom_parasite_data") {
    return cPopulationEventFactory::EVENT_print_dom_parasite_data;
  }else if (name == "print_instruction_data") {
    return cPopulationEventFactory::EVENT_print_instruction_data;
  }else if (name == "print_instruction_abundance_histogram") {
    return cPopulationEventFactory::EVENT_print_instruction_abundance_histogram;
  }else if (name == "print_depth_histogram") {
    return cPopulationEventFactory::EVENT_print_depth_histogram;
  }else if (name == "print_genotype_abundance_histogram") {
    return cPopulationEventFactory::EVENT_print_genotype_abundance_histogram;
  }else if (name == "print_species_abundance_histogram") {
    return cPopulationEventFactory::EVENT_print_species_abundance_histogram;
  }else if (name == "print_lineage_totals") {
    return cPopulationEventFactory::EVENT_print_lineage_totals;
  }else if (name == "print_lineage_counts") {
    return cPopulationEventFactory::EVENT_print_lineage_counts;
  }else if (name == "print_dom") {
    return cPopulationEventFactory::EVENT_print_dom;
  }else if (name == "parasite_debug") {
    return cPopulationEventFactory::EVENT_parasite_debug;
  }else if (name == "print_dom_parasite") {
    return cPopulationEventFactory::EVENT_print_dom_parasite;
  }else if (name == "print_genotype_map") {
    return cPopulationEventFactory::EVENT_print_genotype_map;
  }else if (name == "print_number_phenotypes") {
    return cPopulationEventFactory::EVENT_print_number_phenotypes;
  }else if (name == "save_population") {
    return cPopulationEventFactory::EVENT_save_population;
  }else if (name == "load_population") {
    return cPopulationEventFactory::EVENT_load_population;
  }else if (name == "save_clone") {
    return cPopulationEventFactory::EVENT_save_clone;
  }else if (name == "load_clone") {
    return cPopulationEventFactory::EVENT_load_clone;
  }else if (name == "load_dump_file") {
    return cPopulationEventFactory::EVENT_load_dump_file;
  }else if (name == "dump_pop") {
    return cPopulationEventFactory::EVENT_dump_pop;
  }else if (name == "detail_pop") {
    return cPopulationEventFactory::EVENT_detail_pop;
  }else if (name == "detail_parasite_pop") {
    return cPopulationEventFactory::EVENT_detail_parasite_pop;
  }else if (name == "dump_historic_pop") {
    return cPopulationEventFactory::EVENT_dump_historic_pop;
  }else if (name == "dump_memory") {
    return cPopulationEventFactory::EVENT_dump_memory;
  }else if (name == "inject") {
    return cPopulationEventFactory::EVENT_inject;
  }else if (name == "inject_all") {
    return cPopulationEventFactory::EVENT_inject_all;
  }else if (name == "inject_range") {
    return cPopulationEventFactory::EVENT_inject_range;
  }else if (name == "inject_sequence") {
    return cPopulationEventFactory::EVENT_inject_sequence;
  }else if (name == "inject_random") {
    return cPopulationEventFactory::EVENT_inject_random;
  }else if (name == "inject_range_parasite") {
    return cPopulationEventFactory::EVENT_inject_range_parasite;
  }else if (name == "inject_range_pair") {
    return cPopulationEventFactory::EVENT_inject_range_pair;
  }else if (name == "zero_muts") {
    return cPopulationEventFactory::EVENT_zero_muts;
  }else if (name == "mod_copy_mut") {
    return cPopulationEventFactory::EVENT_mod_copy_mut;
  }else if (name == "mod_div_mut") {
    return cPopulationEventFactory::EVENT_mod_div_mut;
  }else if (name == "set_copy_mut") {
    return cPopulationEventFactory::EVENT_set_copy_mut;
  }else if (name == "mod_point_mut") {
    return cPopulationEventFactory::EVENT_mod_point_mut;
  }else if (name == "set_point_mut") {
    return cPopulationEventFactory::EVENT_set_point_mut;
  }else if (name == "calc_landscape") {
    return cPopulationEventFactory::EVENT_calc_landscape;
  }else if (name == "predict_w_landscape") {
    return cPopulationEventFactory::EVENT_predict_w_landscape;
  }else if (name == "predict_nu_landscape") {
    return cPopulationEventFactory::EVENT_predict_nu_landscape;
  }else if (name == "sample_landscape") {
    return cPopulationEventFactory::EVENT_sample_landscape;
  }else if (name == "random_landscape") {
    return cPopulationEventFactory::EVENT_random_landscape;
  }else if (name == "analyze_landscape") {
    return cPopulationEventFactory::EVENT_analyze_landscape;
  }else if (name == "pairtest_landscape") {
    return cPopulationEventFactory::EVENT_pairtest_landscape;
  }else if (name == "test_dom") {
    return cPopulationEventFactory::EVENT_test_dom;
  }else if (name == "analyze_population") {
    return cPopulationEventFactory::EVENT_analyze_population;
  }else if (name == "print_detailed_fitness_data") {
    return cPopulationEventFactory::EVENT_print_detailed_fitness_data;
  }else if (name == "print_genetic_distance_data") {
    return cPopulationEventFactory::EVENT_print_genetic_distance_data;
  }else if (name == "genetic_distance_pop_dump") {
    return cPopulationEventFactory::EVENT_genetic_distance_pop_dump;
  }else if (name == "task_snapshot") {
    return cPopulationEventFactory::EVENT_task_snapshot;
  }else if (name == "print_viable_tasks_data") {
    return cPopulationEventFactory::EVENT_print_viable_tasks_data;
  }else if (name == "apocalypse") {
    return cPopulationEventFactory::EVENT_apocalypse;
  }else if (name == "kill_rectangle") {
    return cPopulationEventFactory::EVENT_kill_rectangle;
  }else if (name == "rate_kill") {
    return cPopulationEventFactory::EVENT_rate_kill;
  }else if (name == "serial_transfer") {
    return cPopulationEventFactory::EVENT_serial_transfer;
  }else if (name == "hillclimb") {
    return cPopulationEventFactory::EVENT_hillclimb;
  }else if (name == "hillclimb_neut") {
    return cPopulationEventFactory::EVENT_hillclimb_neut;
  }else if (name == "hillclimb_rand") {
    return cPopulationEventFactory::EVENT_hillclimb_rand;
  }else if (name == "calc_consensus") {
    return cPopulationEventFactory::EVENT_calc_consensus;
  }else if (name == "test_size_change_robustness") {
    return cPopulationEventFactory::EVENT_test_size_change_robustness;
  }else if (name == "test_threads") {
    return cPopulationEventFactory::EVENT_test_threads;
  }else if (name == "print_threads") {
    return cPopulationEventFactory::EVENT_print_threads;
  }else if (name == "dump_fitness_grid") {
    return cPopulationEventFactory::EVENT_dump_fitness_grid;
  }else if (name == "dump_genotype_grid") {
    return cPopulationEventFactory::EVENT_dump_genotype_grid;
  }else if (name == "print_tree_depths") {
    return cPopulationEventFactory::EVENT_print_tree_depths;
  }else if (name == "sever_grid_col") {
    return cPopulationEventFactory::EVENT_sever_grid_col;
  }else if (name == "connect_cells") {
    return cPopulationEventFactory::EVENT_connect_cells;
  }else if (name == "disconnect_cells") {
    return cPopulationEventFactory::EVENT_disconnect_cells;
  }else if (name == "inject_resource") {
    return cPopulationEventFactory::EVENT_inject_resource;
  }else if (name == "set_resource") {
    return cPopulationEventFactory::EVENT_set_resource;
  }else{
    return cPopulationEventFactory::EVENT_undefined;
  }
}
