//////////////////////////////////////////////////////////////////////////////
// Copyright (C) 1993 - 2000 California Institute of Technology             //
//                                                                          //
// Read the COPYING and README files, or contact 'avida@alife.org',         //
// before continuing.  SOME RESTRICTIONS MAY APPLY TO USE OF THIS FILE.     //
//////////////////////////////////////////////////////////////////////////////
// generated by Fast Light User Interface Designer (fluid) version 1.00

#ifndef cVistaUI_hh
#define cVistaUI_hh
#include <FL/Fl.H>
#include <FL/Fl_Window.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Repeat_Button.H>
#include <FL/Fl_Double_Window.H>

class cVistaUI {
public:
  bool redraw_on_birth;
  cVistaUI();
private:
  Fl_Window *main_window;
  inline void cb_main_window_i(Fl_Window*, void*);
  static void cb_main_window(Fl_Window*, void*);
public:
  Fl_Output *update_text;
  Fl_Output *average_generation_text;
  Fl_Light_Button *pause_button;
private:
  inline void cb_pause_button_i(Fl_Light_Button*, void*);
  static void cb_pause_button(Fl_Light_Button*, void*);
  inline void cb_Quit_i(Fl_Button*, void*);
  static void cb_Quit(Fl_Button*, void*);
  inline void cb_Exit_i(Fl_Button*, void*);
  static void cb_Exit(Fl_Button*, void*);
public:
  Fl_Light_Button *stats_window_button;
private:
  inline void cb_stats_window_button_i(Fl_Light_Button*, void*);
  static void cb_stats_window_button(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *map_window_button;
private:
  inline void cb_map_window_button_i(Fl_Light_Button*, void*);
  static void cb_map_window_button(Fl_Light_Button*, void*);
  Fl_Light_Button *birth_redraw_button;
  inline void cb_birth_redraw_button_i(Fl_Light_Button*, void*);
  static void cb_birth_redraw_button(Fl_Light_Button*, void*);
  Fl_Light_Button *update_redraw_button;
  inline void cb_update_redraw_button_i(Fl_Light_Button*, void*);
  static void cb_update_redraw_button(Fl_Light_Button*, void*);
  inline void cb_Step_i(Fl_Repeat_Button*, void*);
  static void cb_Step(Fl_Repeat_Button*, void*);
public:
  Fl_Double_Window *stats_window;
private:
  inline void cb_stats_window_i(Fl_Double_Window*, void*);
  static void cb_stats_window(Fl_Double_Window*, void*);
  inline void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
public:
  Fl_Output *total_births;
  Fl_Output *breed_true;
  Fl_Output *parasites;
  Fl_Output *energy;
  Fl_Output *max_fitness;
  Fl_Output *max_merit;
  Fl_Output *dom_fitness;
  Fl_Output *dom_merit;
  Fl_Output *dom_gestation;
  Fl_Output *dom_size;
  Fl_Output *dom_copy_size;
  Fl_Output *dom_exec_size;
  Fl_Output *dom_abundance;
  Fl_Output *dom_births;
  Fl_Output *dom_birth_rate;
  Fl_Output *dom_num_threads;
  Fl_Output *dom_thread_dist;
  Fl_Output *ave_fitness;
  Fl_Output *ave_merit;
  Fl_Output *ave_gestation;
  Fl_Output *ave_size;
  Fl_Output *ave_copy_size;
  Fl_Output *ave_exec_size;
  Fl_Output *ave_abundance;
  Fl_Output *ave_births;
  Fl_Output *ave_birth_rate;
  Fl_Output *ave_num_threads;
  Fl_Output *ave_thread_dist;
  void show();
  void OpenStatsWindow();
  void CloseStatsWindow();
  ~cVistaUI();
};
#endif
