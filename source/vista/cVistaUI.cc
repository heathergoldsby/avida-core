//////////////////////////////////////////////////////////////////////////////
// Copyright (C) 1993 - 2000 California Institute of Technology             //
//                                                                          //
// Read the COPYING and README files, or contact 'avida@alife.org',         //
// before continuing.  SOME RESTRICTIONS MAY APPLY TO USE OF THIS FILE.     //
//////////////////////////////////////////////////////////////////////////////
// generated by Fast Light User Interface Designer (fluid) version 1.00

#include "cVistaUI.hh"
#include <Fl/fl_ask.h>
#include <iostream.h>
#include "vista_main.hh"

inline void cVistaUI::cb_main_window_i(Fl_Window*, void*) {
  vista_main->Close();
}
void cVistaUI::cb_main_window(Fl_Window* o, void* v) {
  ((cVistaUI*)(o->user_data()))->cb_main_window_i(o,v);
}

inline void cVistaUI::cb_pause_button_i(Fl_Light_Button*, void*) {
  vista_main->TogglePauseState();
}
void cVistaUI::cb_pause_button(Fl_Light_Button* o, void* v) {
  ((cVistaUI*)(o->parent()->user_data()))->cb_pause_button_i(o,v);
}

inline void cVistaUI::cb_Quit_i(Fl_Button*, void*) {
  if( fl_ask("Quit the Vista Viewer?\nAvida will switch to primitive viewer mode.") )
  vista_main->Close();
}
void cVistaUI::cb_Quit(Fl_Button* o, void* v) {
  ((cVistaUI*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

inline void cVistaUI::cb_Exit_i(Fl_Button*, void*) {
  if( fl_ask("Exit Avida Run?\nAvida will exit too!!!.") )
vista_main->ExitEvent();
}
void cVistaUI::cb_Exit(Fl_Button* o, void* v) {
  ((cVistaUI*)(o->parent()->user_data()))->cb_Exit_i(o,v);
}

inline void cVistaUI::cb_stats_window_button_i(Fl_Light_Button* o, void*) {
  if( ((Fl_Button*)o)->value() ){
  OpenStatsWindow();
}else{
  CloseStatsWindow();
};
}
void cVistaUI::cb_stats_window_button(Fl_Light_Button* o, void* v) {
  ((cVistaUI*)(o->parent()->parent()->user_data()))->cb_stats_window_button_i(o,v);
}

inline void cVistaUI::cb_map_window_button_i(Fl_Light_Button* o, void*) {
  if( ((Fl_Button*)o)->value() ){
  vista_main->OpenMapWindow();
}else{
  vista_main->CloseMapWindow();
};
}
void cVistaUI::cb_map_window_button(Fl_Light_Button* o, void* v) {
  ((cVistaUI*)(o->parent()->parent()->user_data()))->cb_map_window_button_i(o,v);
}

inline void cVistaUI::cb_birth_redraw_button_i(Fl_Light_Button*, void*) {
  redraw_on_birth = true;
}
void cVistaUI::cb_birth_redraw_button(Fl_Light_Button* o, void* v) {
  ((cVistaUI*)(o->parent()->parent()->user_data()))->cb_birth_redraw_button_i(o,v);
}

inline void cVistaUI::cb_update_redraw_button_i(Fl_Light_Button*, void*) {
  redraw_on_birth = false;
}
void cVistaUI::cb_update_redraw_button(Fl_Light_Button* o, void* v) {
  ((cVistaUI*)(o->parent()->parent()->user_data()))->cb_update_redraw_button_i(o,v);
}

inline void cVistaUI::cb_Step_i(Fl_Repeat_Button*, void*) {
  redraw_on_birth = true;
update_redraw_button->value(0);
birth_redraw_button->value(1);
vista_main->Step();
}
void cVistaUI::cb_Step(Fl_Repeat_Button* o, void* v) {
  ((cVistaUI*)(o->parent()->user_data()))->cb_Step_i(o,v);
}

inline void cVistaUI::cb_stats_window_i(Fl_Double_Window*, void*) {
  CloseStatsWindow();
}
void cVistaUI::cb_stats_window(Fl_Double_Window* o, void* v) {
  ((cVistaUI*)(o->user_data()))->cb_stats_window_i(o,v);
}

inline void cVistaUI::cb_Close_i(Fl_Button*, void*) {
  CloseStatsWindow();
}
void cVistaUI::cb_Close(Fl_Button* o, void* v) {
  ((cVistaUI*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

cVistaUI::cVistaUI() {
  Fl_Window* w;
  redraw_on_birth=false;
  { Fl_Window* o = main_window = new Fl_Window(275, 275, "Vista");
    w = o;
    o->callback((Fl_Callback*)cb_main_window, (void*)(this));
    { Fl_Output* o = update_text = new Fl_Output(5, 5, 65, 25, "Update");
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Output* o = average_generation_text = new Fl_Output(5, 30, 65, 25, "Ave Generation");
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Light_Button* o = pause_button = new Fl_Light_Button(5, 245, 75, 25, "&Pause");
      o->value(1);
      o->color(50);
      o->selection_color(1);
      o->callback((Fl_Callback*)cb_pause_button);
    }
    { Fl_Button* o = new Fl_Button(215, 220, 55, 25, "&Quit");
      o->callback((Fl_Callback*)cb_Quit);
    }
    { Fl_Button* o = new Fl_Button(215, 245, 55, 25, "&Exit");
      o->callback((Fl_Callback*)cb_Exit);
    }
    { Fl_Group* o = new Fl_Group(195, 80, 75, 95, "Windows");
      { Fl_Light_Button* o = stats_window_button = new Fl_Light_Button(195, 80, 75, 25, "&Stats");
        o->selection_color(2);
        o->callback((Fl_Callback*)cb_stats_window_button);
      }
      { Fl_Light_Button* o = map_window_button = new Fl_Light_Button(195, 105, 75, 25, "&Map");
        o->selection_color(2);
        o->callback((Fl_Callback*)cb_map_window_button);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(5, 185, 75, 50, "Redraw On");
      { Fl_Light_Button* o = birth_redraw_button = new Fl_Light_Button(5, 210, 75, 25, "&Birth");
        o->type(102);
        o->callback((Fl_Callback*)cb_birth_redraw_button);
      }
      { Fl_Light_Button* o = update_redraw_button = new Fl_Light_Button(5, 185, 75, 25, "&Update");
        o->type(102);
        o->value(1);
        o->callback((Fl_Callback*)cb_update_redraw_button);
      }
      o->end();
    }
    { Fl_Repeat_Button* o = new Fl_Repeat_Button(105, 220, 60, 25, "Step");
      o->callback((Fl_Callback*)cb_Step);
    }
    o->set_non_modal();
    o->end();
  }
  { Fl_Double_Window* o = stats_window = new Fl_Double_Window(745, 418, "Statistics");
    w = o;
    o->callback((Fl_Callback*)cb_stats_window, (void*)(this));
    { Fl_Button* o = new Fl_Button(665, 390, 75, 25, "&Close");
      o->callback((Fl_Callback*)cb_Close);
    }
    { Fl_Group* o = new Fl_Group(90, 5, 85, 150, "population");
      o->labeltype(FL_NO_LABEL);
      { Fl_Output* o = total_births = new Fl_Output(90, 5, 85, 25, "Total Births:");
        o->box(FL_FLAT_BOX);
      }
      { Fl_Output* o = breed_true = new Fl_Output(90, 30, 85, 25, "Breed True:");
        o->box(FL_FLAT_BOX);
      }
      { Fl_Output* o = parasites = new Fl_Output(90, 55, 85, 25, "Parasites:");
        o->box(FL_FLAT_BOX);
      }
      { Fl_Output* o = energy = new Fl_Output(90, 105, 85, 25, "Energy:");
        o->box(FL_FLAT_BOX);
      }
      { Fl_Output* o = max_fitness = new Fl_Output(90, 80, 85, 25, "Max Fitness:");
        o->box(FL_FLAT_BOX);
      }
      { Fl_Output* o = max_merit = new Fl_Output(90, 130, 85, 25, "Max Merit:");
        o->box(FL_FLAT_BOX);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(540, 0, 180, 295, "dom & ave");
      { Fl_Group* o = new Fl_Group(540, 25, 85, 270, "Dominant");
        { Fl_Output* o = dom_fitness = new Fl_Output(540, 25, 85, 25, "Fitness:");
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = dom_merit = new Fl_Output(540, 50, 85, 25, "Merit:");
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = dom_gestation = new Fl_Output(540, 75, 85, 25, "Gestation:");
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = dom_size = new Fl_Output(540, 100, 85, 25, "Size:");
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = dom_copy_size = new Fl_Output(540, 125, 85, 25, "Copy Size:");
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = dom_exec_size = new Fl_Output(540, 150, 85, 25, "Exec Size");
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = dom_abundance = new Fl_Output(540, 175, 85, 25, "Abundance");
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = dom_births = new Fl_Output(540, 200, 85, 25, "Births");
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = dom_birth_rate = new Fl_Output(540, 225, 85, 25, "Birth Rate");
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = dom_num_threads = new Fl_Output(540, 250, 85, 25, "Num Threads");
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = dom_thread_dist = new Fl_Output(540, 275, 85, 20, "Thread Dist");
          o->box(FL_FLAT_BOX);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(630, 25, 90, 270, "Average");
        { Fl_Output* o = ave_fitness = new Fl_Output(630, 25, 90, 25);
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = ave_merit = new Fl_Output(630, 50, 90, 25);
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = ave_gestation = new Fl_Output(630, 75, 90, 25);
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = ave_size = new Fl_Output(630, 100, 90, 25);
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = ave_copy_size = new Fl_Output(630, 125, 90, 25);
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = ave_exec_size = new Fl_Output(630, 150, 90, 25);
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = ave_abundance = new Fl_Output(630, 175, 90, 25);
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = ave_births = new Fl_Output(630, 200, 90, 25);
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = ave_birth_rate = new Fl_Output(630, 225, 90, 25);
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = ave_num_threads = new Fl_Output(630, 250, 90, 25);
          o->box(FL_FLAT_BOX);
        }
        { Fl_Output* o = ave_thread_dist = new Fl_Output(630, 275, 90, 20);
          o->box(FL_FLAT_BOX);
        }
        o->end();
      }
      o->end();
    }
    o->end();
  }
}

void cVistaUI::show() {
  main_window->show();
}

void cVistaUI::OpenStatsWindow() {
  stats_window->show();
  stats_window_button->set();
  vista_main->UpdateStatsWindow();
}

void cVistaUI::CloseStatsWindow() {
  stats_window->hide();
  stats_window_button->clear();
}

cVistaUI::~cVistaUI() {
  vista_main->CloseMapWindow();
  CloseStatsWindow();
  main_window->hide();
  Fl::wait(0.025);
}
