from pySessionDumbView import pySessionDumbView

import qt

class pySessionDumbCtrl(qt.QObject):
  def __init__(self, session_mdl):
    self.session_mdl = session_mdl
    self.session_dumb_view = pySessionDumbView()

  def construct(self):
    self.connect(self.session_dumb_view.startpause_avida_pb,
      qt.SIGNAL("clicked()"), self.startPausePBClickedSlot)
    self.connect(self.session_dumb_view.update_avida_pb,
      qt.SIGNAL("clicked()"), self.updatePBClickedSlot)

    self.connect(self.session_mdl.session_mdtr.avida_threaded_driver_mdtr,
      qt.PYSIGNAL("AvidaUpdatedSig"), self.avidaUpdatedSlot)

    self.start_pb_text = "Start..."
    self.pause_pb_text = "Pause..."
    self.should_update = False
    self.doPause()
    self.session_dumb_view.show()

  def destruct(self):
    print("pySessionDumbCtrl.destruct()...")
    self.disconnect(self.session_dumb_view.startpause_avida_pb,
      qt.SIGNAL("clicked()"), self.startPausePBClickedSlot)
    print("pySessionDumbCtrl.destruct()...1")
    self.disconnect(self.session_dumb_view.update_avida_pb,
      qt.SIGNAL("clicked()"), self.updatePBClickedSlot)
    print("pySessionDumbCtrl.destruct()...2")
    self.disconnect(self.session_mdl.session_mdtr.avida_threaded_driver_mdtr,
      qt.PYSIGNAL("AvidaUpdatedSig"), self.avidaUpdatedSlot)
    print("pySessionDumbCtrl.destruct()...3")
    del self.session_mdl
    print("pySessionDumbCtrl.destruct()...4")
    del self.session_dumb_view
    print("pySessionDumbCtrl.destruct() done.")

  def __del__(self):
    print("pySessionDumbCtrl.__del__()...")
    self.destruct()
    print("pySessionDumbCtrl.__del__() done.")

  def doPause(self):
    self.should_update = False
    self.session_dumb_view.startpause_avida_pb.setText(self.start_pb_text)
    self.session_dumb_view.update_avida_pb.setEnabled(True)
    self.session_mdl.session_mdtr.avida_threaded_driver_mdtr.emit(qt.PYSIGNAL("doPauseAvidaSig"), ())

  def doStart(self):
    self.should_update = True
    self.session_dumb_view.startpause_avida_pb.setText(self.pause_pb_text)
    self.session_dumb_view.update_avida_pb.setEnabled(False)
    self.session_mdl.session_mdtr.avida_threaded_driver_mdtr.emit(qt.PYSIGNAL("doStartAvidaSig"), ())

  def startPausePBClickedSlot(self):
    if True == self.should_update:
      self.doPause()
    else:
      self.doStart()
    
  def updatePBClickedSlot(self):
    self.session_mdl.session_mdtr.avida_threaded_driver_mdtr.emit(qt.PYSIGNAL("doUpdateAvidaSig"), ())

  def avidaUpdatedSlot(self):
    #stats = self.session_mdl.avida_threaded_driver.GetPopulation().GetStats()
    stats = self.session_mdl.population.GetStats()
    self.session_dumb_view.log_te.append(
      "UD: " + repr(stats.GetUpdate()) +
      "\t Gen: " + repr(stats.SumGeneration().Average()) +
      "\t Fit: " + repr(stats.GetAveFitness()) +
      #"\t Size: " + repr(self.session_mdl.avida_threaded_driver.GetPopulation().GetNumOrganisms()))
      "\t Size: " + repr(self.session_mdl.population.GetNumOrganisms()))
