<?xml version="1.0"?>

<!--
  Copyright 2002-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<status>

  <developers>
    <person name="Brian Baer" email="baerb@msu.edu" id="BDB" />
    <person name="David Bryson" email="brysonda@msu.edu" id="DMB" />
    <person name="Jeff Clune" email="jclune@msu.edu" id="JMC" />
    <person name="Dusan Misevic" email="" id="DM" />
    <person name="Kaben Nanlohy" email="" id="KGN" />
    <person name="Charles Ofria" email="ofria@cse.msu.edu" id="CAO" />
  </developers>

  <changes>
		<!-- Some action types have associated images. By default, images are
		defined for 'add', 'fix', 'remove', 'update' and 'hack'. If you add
		src/documentation/resources/images/<foo>.jpg images, these will
		automatically be used for entries of type <foo>. -->

    <!-- Add new releases here -->

		<release version="2.3.0 (r76) date="28 March 2005">
			<action dev="CAO" type="fix" context="feature">
				Fixed the output of <code>print_genotypes</code> event.  It was
				double-printing all historic genotypes with different formats (ick.)
			</action>
			<action dev="KGN" type="remove" context="AvidaED">
				Removed python files that are supposed to be autogenerated.
			</action>
			<action dev="KGN" type="remove" context="AvidaED">
				Removed obsolete python and pyuic files.
			</action>
			<action dev="KGN" type="update" context="AvidaED">
				Moved AvidaED python files into source/python
			</action>
			<action dev="KGN" type="add" context="AvidaED">
				Added scripts to build OS X application.  AvidaED.app on OS X can be
				launched from command line for an interactive interpreter, or by 
				double-clicking on its icon in the finder.
			</action>
			<action dev="KGN" type="fix" context="AvidaED">
				Fixed bad build rule prevent build of AvidaED/Mac.
			</action>
			<action dev="KGN" type="update" context="AvidaED">
				AvidaED no longer starts an Avida Session at launch time.  Instead
				an Avida object can be created after launch time using the sequence
				of commands (without semi-colons):
				<code>avida = pyAvida(); avida.construct(genesis);</code>
			</action>
			<action dev="KGN" type="add" context="AvidaED">
				Added an AvidaED Xcode project for editing files.
			</action>
			<action dev="KGN" type="update" context="AvidaED">
				Added pyuic build target to AvidaED Xcode project. Organized python
				files into sensible groups.
			</action>
			<action dev="BDB" type="fix" context="AvidaED">
				Fixed layout problems with <code>OnePop_PetriDishView</code>.
			</action>
			<action dev="BDB" type="add" context="AvidaED">
				Added code to call routine to read freezer items.
			</action>
			<action dev="BDB" type="update" context="AvidaED">
				Set <code>pyPetriConfigureView</code> to capture start signal.
			</action>
			<action dev="BDB" type="add" context="AvidaED">
				Added code to write files into the freezer directory.
			</action>
			<action dev="BDB" type="add" context="AvidaED">
				Added code to read default Genesis file, change values that have been
				modified by user in the PetriConfiguration screen, and write a new
				Genesis file into the working directory.  Also copies the event,
				environment and organism file to working directory.
			</action>
			<action dev="BDB" type="add" context="AvidaED">
				Added new reload commands for recently added classes.
			</action>
			<action dev="BDB" type="add" context="AvidaED">
				Added signal support for the start button.  Activated the start button.
			</action>
			<action dev="BDB" type="add" context="AvidaED">
				Added signals to support freezing a populated petri dish. Added
				<code>extractPopulationSlot<code> to send all organisms in population
				to be frozen.
			</action>
			<action dev="CAO" type="add" context="core">
				Added in <code>sense</code> instruction into <code>hardware_cpu</code>
			</action>
			<action dev="KGN" type="fix" context="AvidaED">
				Population graphing works again.
			</action>
			<action dev="JMC" type="add" context="AvidaED">
				Added statistics code to support population information and actual
				graphing support.
			</action>
			<action dev="BDB" type="update" context="AvidaED">
				Changed the look of various AvidaED windows.
			</action>
			<action dev="BDB" type="add" context="AvidaED">
				Added a utility that will check all <code>.ui</code> files and find
				ones that are newer than their equivalent <code>*.py</code> files.
				The program will then offer the user the chance to create the
				<code>.py</code> file.  User may need to change the command line
				to reflect the location of the <code>pyuic</code> program.
			</action>
		</release>
    <release version="2.2.2 (r27) date="24 February 2005">
      <action dev="KGN" type="add" context="documentation">
        Added build instructions for third-party development software
        on OS X.
      </action>
      <action dev="KGN" type="update" context="admin">
      	Clean up pyuic auto-generated files incorrectly being managed
      	under source control.  Updated Xcode project accordingly.
      </action>
      <action dev="CAO" type="update" context="core">
      	Incorporated speed ups posted by Dave MacLachlan on SourceForge
      	and the DigitalEvolution mailing list.
      </action>
      <action dev="DMB" type="update" context="admin">
      	Fixed Xcode project so that optimization settings are appropriately
      	set according to build type.  Added in additional optimizations
      	suggested by Dave MacLachlan.
      </action>
      <action dev="KGN" type="update" context="python code">
        Fixed various pyste and build system components to handle various
        recent updates.
      </action>
    </release>
    <release version="2.2.1 (r15) date="16 February 2005">
      <action dev="BDB" type="fix" context="platform support">
        Allow code to compile on Linux with GCC version 3.4.
      </action>
      <action dev="DMB" type="fix" context="bug">
        Modified bonus instructions to save and restore the previous
        execution state of the organism.  Without this step, organisms
        could be prematurely marked as 'not running'.  When combined
        with death, the objects could therefore be deleted twice. 
        This would lead to stochastic memory corruption and crashes.
      </action>
    </release>
    <release version="2.2 (r12)" date="14 February 2005">
      <action dev="DMB" type="add" context="admin">
        Initial Subversion Import
      </action>
      <action dev="DMB" type="add" context="admin">
        Added support for Forrest Documentation
      </action>
      <action dev="CAO" type="fix" context="bug">
        Repair offspring merit calculation.
      </action>
      <action dev="DM" type="fix" context="feature">
        Minor modification to RECOMBINE comman in the analyze mode. 
        A for loop was doing one less iteration that it shoud have
        resulting in creation of 2 less recombinant genomes.
      </action>
      <action dev="DM" type="add" context="feature">
        Added another event, set_reaction_value_mult, that allows tou to multiply 
        the reaction value, not just set it. Useful for changing environments setup. 
        See documentation for more.
      </action>
    </release>
    <release version="2.1" date="8 January 2005">
      <action dev="KGN" type="update" context="build">
        Windows release of latest updates for Discover Magazine article.
      </action>
    </release>
    <release version="2.0 beta 7" date="October 2003">
      <action dev="CAO" type="add" context="feature">
        New CPU model, GUI components, and various research specific improvements.
      </action>
      <action dev="CAO" type="add" context="feature">
        Implemented proportional merit with sex...
      </action>
      <action dev="CAO" type="add" context="feature">
        Setup environment file with an extra command:
        <source>SET_ACTIVE [type] [name] [active=true]</source>
        <p>
        Type can currently only be "reaction" (but soon I'll also get resources
        working, and eventually mutations).  Name is the name of the resource,
        and fitnally a true or false if you want that reaction turned on.
        </p>
        <p>
        THEN I also added a command to the analyze mode called "ENVIRONMENT"
        which will allow you to add extra commands to define the environment
        file on the fly.  For example, the analyze command:
        </p>
        <source>ENVIRONMENT SET_ACTIVE reaction NOT false</source>
        <p>
        Will turn off rewards for not.  They can be turned back on again
        trivially with:
        </p>
        <source>ENVIRONMENT SET_ACTIVE reaction NOT true</source>
      </action>
      <action dev="CAO" type="fix" context="bug">
        Made changes to arrays in analyze mode so that they use tArray and
        tMatrix to make them easier to use with variable sizes.
      </action>
      <action dev="CAO" type="add" context="feature">
        Added new functions "AnalyzeComplexity" and "AnalyzePopComplexity"
        to analyze source code.
      </action>
      <action dev="CAO" type="add" context="feature">
        Added in three new events to modify the topology of a population:
        <br/>sever_column : sever a full column of cells
        <br/>connect_cells : connect two cells together
        <br/>disconnect_cells : disconnect two cells from each other.
      </action>
      <action dev="CAO" type="add" context="feature">
        Added some info about the new AVERAGE_MODULARITY analyze command to
        the documentation files.
      </action>
      <action dev="CAO" type="add" context="feature">
        After much tweaking, implemented a new analyze function, <code>AVERAGE_MODULARITY</code>.
        <br/>Usage:
        <source>AVERAGE_MODULARITY output_file task.0 task.1 task.2 task.3 task.4 task.5 task.6 task.7 task.8</source>
      </action>
      <action dev="CAO" type="add" context="feature">
        Fixed the formula used to calculate Standard Error in various
        statistics parameters.
      </action>
    </release>
    <release version="2.0 beta 6" date="September 2003">
      <action dev="CAO" type="fix" context="bug">
        Widened number display fields in CPU viewer so that data can be read
        correctly.
      </action>
      <action dev="CAO" type="add" context="feature">
        Added buttons to select number format (binary, decimal, or
        hexadecimal) in Register, Inputs, and Stacks views of CPU viewer in
        GUI.
      </action>
      <action dev="CAO" type="fix" context="bug">
        Minor bugfixes in 4-stack cpu parasite code.
      </action>
      <action dev="CAO" type="add" context="feature">
        Added option to count phenotypes based on tasks completed.    
      </action>
    </release>
    <release version="2.0 beta 5" date="August 2003">
      <action dev="CAO" type="fix" context="bug">
        Workaround for bug in Qt/Windows: setInsideSpacing can't be safely
        called, so removed those calls.
      </action>
      <action dev="CAO" type="add" context="feature">
        Addition of CPU stats to instruction viewer in GUI.
      </action>
      <action dev="CAO" type="fix" context="bug">
        Organism inputs are no longer per-cell, but per-organism; resolved
        related problem of request of now nonexistent inputs.
      </action>
      <action dev="CAO" type="fix" context="bug">
        Restored missing initializations of subclass of cPopulationInterface
        class in qt-viewer.
      </action>
      <action dev="CAO" type="fix" context="bug">
        Added documentation for some existing events.  Changed some
        formatting of events.html documentation so file looks better with
        Safari web browser.
      </action>
      <action dev="CAO" type="fix" context="bug">
        Added missing files to visual studio project.
      </action>
      <action dev="CAO" type="fix" context="bug">
        Restored compatibility with older versions of gcc.
      </action>
      <action dev="CAO" type="add" context="feature">
        Added parasite tracking for 4-stack cpus, added events
        "print_dom_parasite" and "detail_parasite_pop", added default
        organsisms and settings for the 4-stack cpu.
      </action>
      <action dev="CAO" type="add" context="feature">
        Added Bounded Grid/Torus (world topology) switch to population.
        Leaving torus as the default.
      </action>
      <action dev="CAO" type="fix" context="bug">
        Fixed some problems in mutation mapping in analyze mode.
      </action>
    </release>
    <release version="2.0 beta 4" date="July 2003">
      <action dev="CAO" type="fix" context="bug">
        Text viewer Zoom Screen Mini-Map fixed; Modified Map screen now in
        color; Thread Map screen now shows number of threads used by each
        organism.
      </action>
      <action dev="CAO" type="add" context="feature">
        Completion of 4 Stack Hardware.  Inject command and parasite
        abilities now implemented.  Text Viewer environment view mode in
        progress.
      </action>
      <action dev="CAO" type="update" context="internal">
        Added integer version WriteBlockElement to file output routines.
      </action>
      <action dev="CAO" type="fix" context="bug">
        Correction of minor logical error in reaction handling.
      </action>
    </release>
    <release version="2.0 beta 3" date="June 2003">
      <action dev="CAO" type="add" context="feature">
        Avida now runs and builds on Windows.  Many minor changes were made for this, 
        .pro files were added to be used with qmake, the way the configure script searches
        for the ncurses library was modified, pdcurses was incorporated instead of ncurses,
        trio was added to fix some string problems, and some very minor code changes were
        implemented to allow for some differences in the visual studio compiler. 
      </action>
      <action dev="CAO" type="add" context="feature">
        new 4 stack hardware is implemented but not yet fully functional.  It's compatible
        with primitive and ncurses modes, however will cause qt-viewer to crash if used. 
        No functionality associated with the original hardware has been changed.
      </action>
      <action dev="CAO" type="fix" context="bug">
        set up constant time slicer to skip over empty cells, this had been throwing an assert
        error in debug mode.
      </action>
      <action dev="CAO" type="fix" context="bug">
        removed Visual Studio.net support files as they are out of date and no longer work properly.
      </action>
    </release>
    <release version="2.0 beta 2" date="May 2003">
      <action dev="CAO" type="add" context="feature">
        introduced new 4 Stack CPU model.  Removed 3 registers in CPU and replaced with
        4 stacks. Added 4th NOP which allows use of all 4 stacks.  Also changed complement system 
        for nops.  Pairs are now as follows: A,C; B,D; C,A; D,B;
      </action>
      <action dev="CAO" type="fix" context="bug">
        newer C++ compilers want scoping on templates defined inside class definition, event
        if they are only used inside the class.
      </action>
      <action dev="CAO" type="fix" context="bug">
        fixed problem with incorrect copying of instruction libraries when one instruction set was
        initialized to another one.
      </action>
      <action dev="CAO" type="add" context="feature">
        set up Avida to pring out a genesis file if none exists.
      </action>
      <action dev="CAO" type="update" context="internal">
        working on setting up Avida to generate an instruction set file in none exists.  Attached 
        60 character or less descriptions to each of the default instructions, and attached a flag to all 
        instructions declaring they are default.
      </action>
      <action dev="CAO" type="update" context="internal">
        added default event files in C++ that are generated from perl so Avida can be compiled in Windows
        without running perl script by hand as long as no new events are created or modified.
      </action>
      <action dev="CAO" type="fix" context="bug">
        updated .pro files so don't have to change any properties in Visual Studio to compile
      </action>
      <action dev="CAO" type="fix" context="bug">
        The hardware factory has always been creating CPU's of type cHardwareCPU even if everything else
        was assuming cHardware4Stack.  This all works properly now.
      </action>
      <action dev="CAO" type="update" context="internal">
        added pdcurses.h and curses.lib to Avida so one doesn't have to actually check out the whole 
        pdcurses suite to run on Windows.
      </action>
      <action dev="CAO" type="update" context="internal">
        added third party suite "Public Domain Curses" for Win32 compatability.
      </action>
      <action dev="CAO" type="add" context="feature">
        added event print_genotype_map that prints a Matlab file of the genotype IDs to a default file
        "genotype_map.m"
      </action>
      <action dev="CAO" type="fix" context="bug">
        added empty directory aclocal to CVS so don't have to create it by hand every time build Avida
        from scratch
      </action>
      <action dev="CAO" type="update" context="internal">
        update .pri files for Windows builds
      </action>
      <action dev="CAO" type="add" context="feature">
        added Visual Studio.net support files for ncurses viewer, primitive mode, and qt-viewer.
      </action>
      <action dev="CAO" type="update" context="internal">
        cHardware4Stack now hooked into Avida and working properly
      </action>
      <action dev="CAO" type="update" context="internal">
        added new hardware type cHardware4Stack.  Not hooked into rest of Avida yet...
      </action>
      <action dev="CAO" type="update" context="internal">
        re-engineered cFile class to work based off of arrays instead of linked lists.  Each line is 
        now stored as part of a structure which has other info associated with it, such as line numbers
        for better error reporting.  Not being used yet, but available...
      </action>
      <action dev="CAO" type="update" context="internal">
        added HARDWARE_TYPE to genesis file and setup config to load it into Avida, it's not being used yet.
      </action>
      <action dev="CAO" type="update" context="internal">
        modified test_cup.cc to improve the default inputs in the test CPUs so they are more similar
        to those in the environment, and ideally give more accurate answers.
        Setup the default instruction set to be hooked in with a proper instruction library so that
        they can be used outside of a population (i.e. in analyze mode)
      </action>
      <action dev="CAO" type="fix" context="bug">
        fixed bug in testCPU
      </action>
      <action dev="CAO" type="update" context="internal">
        changed cInstLib to cInstSet and cInstSuperLib to cInstLib.  Renamed inst_lib.{cc,hh} to 
        inst_set.{cc,hh} and inst_superlib.hh to inst_lib.hh.  Updated other files accordingly to 
        reflect this change
      </action>
      <action dev="CAO" type="update" context="internal">
        included instruction which injects a parasite into it's own thread.  Also changed count.dat
        so that info regarding parasites is appended to the end of the file.  Removed previous parasite
        info which is now obsolete.
      </action>
    </release>
    <release version="2.0 beta 1" date="April 2003">
      <action dev="CAO" type="fix" context="bug">
        edited Makefile.am to reflect the fact that built event source file depends are build-tree relative
        but cpu source file depends are source-tree relative
      </action>
      <action dev="CAO" type="update" context="internal">
        removed unused sourcecode from beneath qt subdirectory
      </action>
      <action dev="CAO" type="update" context="internal">
        introduced cInstSuperLib to contain a complete library of available instructions corresponding to
        a given hardware class.  cInstLib now indexes into arrays provided by cInstSuperLib
      </action>
      <action dev="CAO" type="fix" context="bug">
        mkdir() is not defined in win32 so added win32_mkdir_hack.hh to define it as a macro so can
        use in windows version
      </action>
      <action dev="CAO" type="fix" context="bug">
        modified namespaces, adding 'using namespace std' appropriately throughout Avida to allow
        compilation on Windows
      </action>
      <action dev="CAO" type="update" context="internal">
        set up qt builds to be performed using qmake on seperately maintained .pro files
      </action>
      <action dev="CAO" type="fix" context="bug">
        fixed error in new tasks, now cast int to double before taking log
      </action>
      <action dev="CAO" type="update" context="internal">
        added code to allow spatial resources
      </action>
      <action dev="CAO" type="update" context="internal">
        allow long lines in an input file to be split across multiple physical lines by use of
        a \ character at the end of the line as a continuation marker
      </action>
      <action dev="CAO" type="add" context="feature">
        added two routines to aid the printing of spatial resource data:
        writeblock - allows for the output of individual grid points
        writeraw - allows any line to be written anywhere in an output file
      </action>
      <action dev="CAO" type="add" context="feature">
        added event kill_rectangle which allows user to kill all organisms in a rectangle
        described by points (X1, Y1) and (X2, Y2).
      </action>
      <action dev="CAO" type="fix" context="bug">
        no longer crashes when population dies out.
      </action>
      <action dev="CAO" type="update" context="internal">
        added version of Max function with type double.  added function Neighbor
        that works with population and spatial resource arrays to find the current neighboring
        cells (even at edge of matrix).
      </action>
      <action dev="CAO" type="fix" context="bug">
        fixed time slicer problem where drastic drop in maximum merit would slow down a run 
        considerably.  Added warning when analyze mode tries to load in a string sequence
        thats supposed to represent a genome, but maximum char goes beyond instruction set size.
      </action>
      <action dev="CAO" type="update" context="internal">
        previous runs can no longer be replicated even when a random seed used is known
        due to extensive reorganization of portions of code that handle divides.
      </action>
      <action dev="CAO" type="add" context="feature">
        initial implementation of sex.  Now exists divide-sex and divide-asex commands,
        former facilitating recombination between two offspring by swapping a region of 
        their code.
      </action>
      <action dev="CAO" type="fix" context="bug">
        fixed hardware getting incorrect info as to if it lived through birth process.
      </action>
      <action dev="CAO" type="fix" context="bug">
        removed mutation rate drifting options and old style crossovers.
      </action>
      <action dev="CAO" type="update" context="internal">
        assembled framework for sexual divides.  Mostly involved pushing some of the 
        final offspring creation to the population and out of the organism.
      </action>
    </release>
    <release version="2.0 beta 0" date="April 2003">
      <action dev="CAO" type="update" context="release">
        Avida has been almost entirely rewritten.
      </action>
    </release>
    <release version="1.6.1" date="2001">
      <action dev="CAO" type="fix" context="bug">
        Fixed a problem with CHILD_SIZE_RANGE in the genesis file -- it used to
        only compare the child size to the *new* parent size; now it will properly
        compare it to the original parent size (and make sure that the new parent
        size also falls into the same legal range)
      </action>
      <action dev="CAO" type="update" context="viewer">
        Added an Average Fitness output in the primitive viewer.
      </action>
      <action dev="CAO" type="update" context="viewer">
        Added a column 10 to the stats.dat output file that indicates the
        depth of the most recent coalescent genotype.
      </action>
      <action dev="CAO" type="update" context="internal">
        Removed "" dependency from assert; stay out of debug move by
        default -- only enter it when DEBUG is defined.
      </action>
      <action dev="CAO" type="update" context="internal">
        Rebuilt data_file.??, simplifying the internal structure and using a
        proper linked list.  Also removed dependency on .
      </action>
      <action dev="CAO" type="update" context="internal">
        Removed dependencies in string.?? ; fixed some bugs in Compare()
        that didn't turn up before, but seem real.  Often '\0' was being
        saught when a cString was being compared to a char *, when the cString
        data does not end in a \0 (a seperate size measure is kept)
      </action>
      <action dev="CAO" type="update" context="internal">
        Removed global memory object.  It was used throughout the code, but
        most allocations did *not* make use of it.  We should use some kind
        of solid memory tracking method, but this one was less than optimal.
      </action>
      <action dev="CAO" type="update" context="internal">
        In the viewer, shifted the maps from being normal arrays to using the
        tArray object; also kept them all local to maps (rather than being
        allocated in one place and freed in another like they were)
      </action>
      <action dev="CAO" type="update" context="internal">
        Shifted environment connection lists such that they are now part of
        the environment from the beginning and only initialize (not created)
        by the population.  Plus some general cleanup and organization in them.
      </action>
      <action dev="CAO" type="update" context="internal">
        Moved all cList objectes over to the cleaner, templated tList.  This
        allowed for some standardization in our current way of doing things,
        a cleaner interface (and simplification of some code).  In the future
        we may want to move all of this over to the STL list template, but for
        the moment this was much easier.
      </action>
      <action dev="CAO" type="update" context="internal">
        Cut down on the number of includes from cTools.h; most of them are
        not required.
      </action>
      <action dev="CAO" type="update" context="internal">
        Converted all of the "TRUE" and "FALSE" occurances to "true" and "false"
        throughout the entire code.  Changed int to bool in most appropriate
        cases.
      </action>
      <action dev="CAO" type="update" context="internal">
        Moved code_array.?? entirely over to assert from debug.
      </action>
      <action dev="CAO" type="remove" context="internal">
        Anihilated old geneology stuff.
      </action>
      <action dev="CAO" type="update" context="internal">
        Went through header files in source/main/ and removed all non-required
        includes.
      </action>
      <action dev="CAO" type="remove" context="feature">
        Removed the very old [5+ years] resources implementation.
      </action>
      <action dev="CAO" type="remove" context="feature">
        Removed everything to do with redcode.
      </action>
      <action dev="CAO" type="remove" context="feature">
        Removed Block time slicer.
      </action>
      <action dev="CAO" type="update" context="internal">
        Abstracted out the time slicer so it just keeps a collection of ints,
        each with their own merit, and a "GetNextID()" method which returns the
        int that goes next...   Moved both slice and merit into the tools
        directory.
      </action>
      <action dev="CAO" type="update" context="internal">
        Adjusted the header files in the viewer so that the viewer takes
        virtually no time to compile in primitive mode.
      </action>
      <action dev="CAO" type="update" context="internal">
        Added BENCHMARK file to keep track of timings of avida as changes
        are made.  Added MAP file to track #include's.  Add tMemTrack for
        potential tracking.
      </action>
      <action dev="CAO" type="remove" context="internal">
        Removed files:
<source>
source/cpu/cpu.ii source/cpu/hardware.ii source/cpu/head.ii
source/cpu/interface.cc source/cpu/interface.hh
source/main/classes.hh source/main/geneology.cc
source/main/geneology.hh source/tools/include.hh
source/tools/lookup.cc source/tools/lookup.hh
source/tools/memory.cc source/tools/memory.hh
source/tools/memory.ii source/tools/memtrack.cc
source/tools/memtrack.hh source/tools/struct.cc
source/tools/struct.hh
</source>
      </action>
      <action dev="CAO" type="update" context="internal">
        Moved functionality from inst_lib.hh into its code file...
      </action>
      <action dev="CAO" type="remove" context="internal">
        Removed cFlags object entirely; got rid of tools.ii.
      </action>
      <action dev="CAO" type="remove" context="internal">
        Removed debug.ii, random.ii, and string.ii
      </action>
      <action dev="CAO" type="update" context="internal">
        Created a string_util.?? component to hold higher level string methods.
      </action>
      <action dev="CAO" type="update" context="internal">
        Created a seperate inst_args.?? component to contain instructions that
        can have arguments.  Ideally this needs to be further compartmentalized
        in the futures.
      </action>
      <action dev="CAO" type="update" context="internal">
        Created cGenome and cCPUMemory to replace cCodeArray; a *much* cleaner
        interface.  They are in main/genome.?? and cpu/cpu_memory.??
        respectively.  [This was a very serious, code-wide change!]  cGenome
        is a fixed length, doesn't have flags associated with each
        instruction, and is used for most of the old occurances of cCodeArray.
        cCPUMemory is more similar to the original cCodeArray, but is derived
        from cGenome (henece functions that that cGenome can use either) and has
        many fewer methods that should add up to the same functionality.
      </action>
      <action dev="CAO" type="update" context="internal">
        Added main/genome_util.?? for static genome manipulation and
        comparison functions (like Hamming and Edit distances).
      </action>
      <action dev="CAO" type="remove" context="internal">
        Stripped out a lot of the redundent methods from cHardware.  More of this
        should be done.
      </action>
      <action dev="CAO" type="update" context="internal">
        Moved tracking of stepping through organisms in the viewer over to
        population.  Got rid of all of the AltInstructionSet nonsense that
        used to handle it.  There are now two tight loops in DoUpdate() ; one
        of them is run if you're stepping, the other if your not, so there
        should be no speed loss.
      </action>
      <action dev="CAO" type="update" context="internal">
        Continued to stip down the interface to cHardware.  Ideally we'll be
        able to shift instruction execution in there soon (from cBaseCPU) and
        rebuild cBaseCPU into cOrganism or somesuch.
      </action>
      <action dev="CAO" type="update" context="internal">
        Re-vamped cInstLib.  Made cInstEntry a private object, and generally
        cleaned up the insides.  Inst libs might take longer to load at
        startup now (insignificant since its done only once, and we're talking
        miliseconds), but the interface is *much* cleaner.
      </action>
      <action dev="CAO" type="update" context="internal">
        Created seperate inst_util.?? component to handle interations between
        inst_lib and genomes (such as printing) and initializations of
        inst libraries.
      </action>
      <action dev="CAO" type="remove" context="feature">
        Got rid of arg-based instruction set and binary instruction set entirely.
        This had remarkably far-reaching effects.
      </action>
      <action dev="CAO" type="remove" context="feature">
        Removed curses.?? [Its old enough that we shouldn't need it anymore,
        and the interface was out of date.]
      </action>
      <action dev="CAO" type="update" context="internal">
        Created a tDictionary template that takes in strings with arbitrary
        data, and can lookup the data via the string.  Uses a hast table keyed
        off of the string.
      </action>
      <action dev="CAO" type="add" context="feature">
        Avida will now warn you if you attempt to load an instruction in the
        inst library that doesn't exits.  It used to just ignore it.
      </action>
      <action dev="CAO" type="update" context="internal">
        Merged cCreature into cBaseCPU.  Removed creature.hh
      </action>
      <action dev="CAO" type="update" context="internal">
        Moved cCPUStack into its own component
      </action>
      <action dev="CAO" type="update" context="internal">
        Separated out hardware and cpu into logical elements.  This is a huge
        change, and I'm not going into detail here about it.
      </action>
      <action dev="CAO" type="update" context="internal">
        Setup memory allocation method Necrophelia to work more correctly -- it
        now uses the older memory that was lingering in the hardware the organism
        is in.
      </action>
      <action dev="CAO" type="update" context="internal">
        Shifted cpu/cpu.?? to main/organism.?? and cleaned up dependencies.
      </action>
      <action dev="CAO" type="update" context="internal">
        In genesis, changed the name of the RESET_* configuration variables, to
        the more acurate STERILIZE_*
      </action>
      <action dev="CAO" type="fix" context="bug">
        Added #include &lt;string.h&gt; in cString.h and debug.hh -- it was crashing on
        calls to strlen() on some newer compilers.
      </action>
      <action dev="CAO" type="fix" context="bug">
        Fixed templates in tDictionary; reuse of "T" as templated class crashed on
        some newer compilers.
      </action>
      <action dev="CAO" type="fix" context="bug">
        Fixed make_events.pl -- it was creating statments in the form of
        (test_input == "") variable=default : variable=input_value;
        This is a problem since the variable should always be on the outside of
        such statements.  Unfortunatly, that gives other errors, so I changed it
        to a proper if-else.  New format is:
        if (test_input == "") variable=default; else variable=input_value;
      </action>
      <action dev="CAO" type="fix" context="bug">
        Fixed some const problems in events.
      </action>
      <action dev="CAO" type="add" context="feature">
        Added genesis option "REQUIRED_TASK", which lets the user set the id
        of a mandatory task for a divide to be successful.
      </action>
      <action dev="CAO" type="update" context="internal">
        Removed the cAvidaMain events files. All events are now defined in 
        events/cPopulation.events. I removed two events completely, the one to
        change the viewer and the one to print the event list. I think both
        are pretty unnecessary (and are in the way of cleaning up the code more).
      </action>
      <action dev="CAO" type="remove" context="feature">
        Removed LINEAR_MEMORY option...
      </action>
      <action dev="CAO" type="update" context="internal">
        Systematically shifted some includes to be more restrictive (in .cc
        rather than .hh)
      </action>
      <action dev="CAO" type="update" context="internal">
        Removed class cCPUInfo entirely; placed most components into cPhenotype,
        and the rest directly into cOrganism.
      </action>
      <action dev="CAO" type="update" context="internal">
        Created hardware_util.?? to handle loading of hardware methods into
        instruction libraries.
      </action>
      <action dev="CAO" type="update" context="internal">
        Created lineage_util.?? to remove lineage printing (and hence all
        knowledge of lineages) from stats.
      </action>
      <action dev="CAO" type="update" context="internal">
        Created organism_util.?? to provide a location for functions that act
        on organisms but require the use of both genotype and genebank.
      </action>
      <action dev="CAO" type="update" context="internal">
        Lots of changes throughout viewer to get it up and running again with
        all the modifications from the rest of the code...
      </action>
      <action dev="CAO" type="add" context="feature">
        Added more descriptive faults in the zoom mode of the viewer; helpful in
        debugging organism operation.
      </action>
      <action dev="CAO" type="fix" context="bug">
        Changed minimum executed and copied size so that at the minimum values,
        the organisms are legal, but not below (changed a '&lt;=' to just a '&lt;').
        This means that with a minimum copied size of 1.0, everything must be
        copied (as opposed to more than everything, which was causing this to
        break before.
      </action>
      <action dev="CAO" type="update" context="internal">
        Generally did a lot of prep work to get the organisms well seperated from
        the population...  That'll be the next big step.
      </action>
      <action dev="CAO" type="update" context="internal">
        Created a population_cell.?? component; populations have a collection
        of cells instead of organisms -- the cells contain the organisms that
        make up the population.
      </action>
      <action dev="CAO" type="update" context="internal">
        Created a seperate mutations.?? component, with a cMutationRates class
        to keep track of mutation rates, and handle basic functions dealing with
        them.  Each population cell has its own mutaiton rates, which get passed
        to any organism placed into that cell.  All traces of mutations have
        been removed from environments.
      </action>
      <action dev="CAO" type="update" context="internal">
        Most of the system has been fully levelized -- all of the files in the
        tools/  main/ and cpu/ directories are set; only the viewer and events
        are left to be done, and they should be rather straigh-forward.  Take
        a look at current/source/tools/MAP and current/source/LEVELS for more
        info.
      </action>
      <action dev="CAO" type="update" context="internal">
        Organisms are now unique entities for their entire existance; they used to
        be referred to as CPUs in the code, and would have new genomes regularly
        loaded into them.  A population is now a collection of cells, each of
        which can be occupied with an organism or not.  When an organism gives
        birth, it passes a fully constructed offspring organism to the population
        to be placed.
      </action>
      <action dev="CAO" type="update" context="internal">
        The population object itself has been entirely overhauled.  Its streamlined
        to now have a minimal number of methods, including the key methods
        ActivateOrganism(), which is always called to place an organism in
        a population, and  KillOrganism() which must be called to remove an
        organism.  This allows central points for statistics to be done, though
        they haven't been moved there yet.
      </action>
      <action dev="CAO" type="update" context="internal">
        Hardware construction and destruction has been centralized in a hardware
        factory object; this will allow recycling of hardware objects for a
        speed increase, though this optimization still needs to be finished.
      </action>
      <action dev="CAO" type="update" context="internal">
        A number of utility classes have been created to more complex manipulation
        of objects that don't belong inside of them.  This has made the
        relevent classes cleaner and easier to understand.
      </action>
      <action dev="CAO" type="add" context="feature">
        Added configure mode --enable-normal to compile without either debug or
        optimization.  Much faster for testing!
      </action>
      <action dev="CAO" type="update" context="internal">
        Major re-engineering of cPhenotype -- the internals should be much
        cleaner now.
      </action>
      <action dev="CAO" type="update" context="internal">
        Created symbol_util.?? component in viewers to remove all of the symbol
        handling from population_cell.??
      </action>
      <action dev="CAO" type="fix" context="bug">
        Got TestCPUs working properly at last.
      </action>
      <action dev="CAO" type="fix" context="bug">
        Got death working again.
      </action>
      <action dev="CAO" type="update" context="viewer">
        Tracing now provides registers in both decimal and hex formats.  Also,
        merit is broken down into initial (either constant or proportional to
        length) and earned bonuses.
      </action>
      <action dev="CAO" type="update" context="internal">
        Removed a bunch of viewer related methods from cAvidaMain that were either
        unused or redundant.
      </action>
      <action dev="CAO" type="update" context="internal">
        Cleaned up even more header files (in particular test_cpus were being
        included in some components they didn't need to be in any more.)
      </action>
      <action dev="CAO" type="fix" context="bug">
        The GetTest[...] methods in genotype had had some problems when a
        genotype wasn't viable; these should be fixed now.
      </action>
      <action dev="CAO" type="update" context="viewer">
        Surpressed output of warning that data files are bring over-written.
        Ideally, we'll put this back in properly at some point, but at the
        moment, its messes with the viewer.
      </action>
      <action dev="CAO" type="update" context="viewer">
        Improved output methods, and in particular "species.dat" for speciation
        measurements.
      </action>
      <action dev="CAO" type="update" context="internal">
        Moved task_buffer.?? to the more generic template tBuffer.h and placed
        it in tools.
      </action>
      <action dev="CAO" type="add" context="feature">
        Removed all portions of current resource system throughout code
        (in preperation of setting up a new one).
      </action>
      <action dev="CAO" type="update" context="viewer">
        Renamed event_list to events.cfg
      </action>
      <action dev="CAO" type="update" context="internal">
        Changed all "special" assert commands to the default assert.
      </action>
      <action dev="CAO" type="update" context="internal">
        Moved inst_lib and mutation rates into environment.
      </action>
      <action dev="CAO" type="fix" context="bug">
        Repaired generation counting... it was always incrementing the generation
        of parent no matter what the genesis file said, and *then* it would
        increment the generation of the parent.  Obviously this was a bug all
        around and its now fixed.  I did, however, set the defaults to splitting
        and increasing the generation of both parent and child.
      </action>
    </release>
    <release version="1.6" date="29 September 2000">
      <action dev="CAO" type="add" context="feature">
        Many new features, see info for details.
      </action>
    </release>
    <release version="1.4" date="29 September 2000">
      <action dev="CAO" type="add" context="feature">
        Added events and other features.
      </action>
    </release>
    <release version="1.3.2" date="11 November 1999">
      <action dev="CAO" type="fix" context="bug">
        Fixed ncurses under RedHat Linux 6.x, as well as other bugs.
      </action>
    </release>
    <release version="1.3.1" date="7 September 1999">
      <action dev="CAO" type="fix" context="bug">
        Fixed ncurses under RedHat Linux 5.x.
      </action>
    </release>
    <release version="1.3" date="12 August 1999"/>
    <release version="1.0.1" date="7 May 1998"/>
  </changes>

  <todo>
    <actions priority="high">
      <action context="avida-ed" dev="KGN">
        Setup CMake to build application bundle.
      </action>
      <action context="avida-ed" dev="KGN">
        Implement Organism view.
      </action>
      <action context="avida-ed" dev="KGN">
        Move python subdir out of Boost.Python subdir.
      </action>
      <action context="admin" dev="DMB">
        Scheduled backups of SVN repositories.
      </action>
      <action context="admin" dev="KGN">
        Fix Dashboards.
      </action>
      <action context="admin" dev="KGN">
        Add python unit test to dashboards.
      </action>
      <action context="admin" dev="KGN">
        Fix and add consistency tests.
      </action>
    </actions>
    <actions priority="low">
      
    </actions>
    <!-- Add todo items. @context is an arbitrary string. Eg:
    <actions priority="high">
      <action context="code" dev="SN">
      </action>
    </actions>
    <actions priority="medium">
      <action context="docs" dev="open">
      </action>
    </actions>
    -->
  </todo>

</status>
