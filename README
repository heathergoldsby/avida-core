Avida 2.8
----------------------------------------------------------------------
Digital Evolution Laboratory at Michigan State University


I.   REQUIREMENTS
II.  GETTING STARTED
  A. Unix/Linux Systems
  B. Apple Xcode Tools
  C. Microsoft Visual Studio
    1. CMake
    2. VC Project
III. CMAKE CONFIGURATION OPTIONS
IV.  CONFIGURING THE CMAKE BUILD
V.   RUNNING CONSISTENCY TESTS
VI.  DOCUMENTATION



I. REQUIREMENTS
----------------------------------------------------------------------

In order to build Avida, you must have CMake 2.4.x or greater
installed. CMake is available from http://www.cmake.org

NCurses, in order to build the console viewer.

Python 2.3 or greater to run consistency tests.

On Mac OS X, a separate Xcode project is available. Xcode 2.1 or
greater is required (2.4 or greater recommended).


II. GETTING STARTED
----------------------------------------------------------------------


A. Unix/Linux Systems

To compile and install Avida, all you have to do is run:
$ ./build_avida

By default, you will get an optimized version of the code, as well as
the NCurses viewer. The installation goes into a directory called
'work' that is created in a subdirectory named 'cbuild' directory.
See below how to change that.



B. Apple Xcode Tools

In Apple's Xcode, select the Deployment for an optimized build
configured for your CPU platform.  Click the 'Build' button on
the project window.  The compiled binary and starting config files
will be copied (by default) into:
${PROJECT_DIR}/build/Deployment/work



C. Microsoft Visual Studio

There are two ways to build Avida using MS Visual Studio, via CMake
and via the provided project file in the top level directory.  The
CMake method is recommended for most users.  It is the most supported
version and shares the same build instructions as the main line Unix/
Linux build.  The included Visual Studio 2005 project file, on the
other hand, is the only supported method for building the current text
GUI environment on Windows, but is not maintained as much.


1. CMake

Open CMake via the Start Menu.  Select the location of the Avida
source code for the "Where is the source code" box.  Select a location
for CMake to build the binaries ("Where to build the binaries").  This
MUST be a NEW directory.  DO NOT set this directory to the top level
of the Avida source code.

Press the "Configure" button.  You may see some errors regarding
NCurses.  If so, click to continue for each, then select
AVD_GUI_NCURSES in the options on the screen and change it to "OFF".
Press "Configure" again.  Once all the Cache Values are in gray, press
the "OK" button to generate the project files.  This will create a
Visual Studio project and solution in directory that you specified
above.  Go to this directory and open up the Solution file.  In
Visual Studio change the Solution Configuration to "Release".  In the
build menu select "Build Solution".  After this finishes you should
have an avida.exe in "${build binaries dir}\bin\release\".  To run
avida you will need to copy the default configuration files from
"${avida sourcecode}\support\config" into the directory alongside
the executable.  From a command window (Type cmd.exe into
Start Menu -> Run and press enter) change into the directory that
contains avida.exe and the configuration files.  Type avida and press
enter.


2. VC Project

The included Visual Studio 2005 project file will build the text based
GUI for Avida.  Open the Solution, select Release for the solution
configuration and run "Build Solution" from the Build menu.



III. CMAKE CONFIGURATION OPTIONS
----------------------------------------------------------------------

Here are the main options available when configuring and building
Avida with cmake :

AVD_CMDLINE
This is a BOOL, either ON or OFF, to enable building interfaceless
Avida (fastest version).
ON by default.

AVD_GUI_NCURSES
 -  This is a BOOL, either ON or OFF, to enable building Avida console
    interface.
 ON by default.

AVD_UNIT_TESTS
 -  This is a BOOL, either ON or OFF, to enable building primitive
    unit test suites.
 OFF by default.

CMAKE_BUILD_TYPE
 -  This is a STRING, one of "None", "Debug", "Release",
    "RelWithDebInfo", "MinSizeRel", to vary optimization levels and
    debugging information in the build.
 "Release" by default.



IV. CONFIGURING THE CMAKE BUILD
----------------------------------------------------------------------

There are three ways by which you can set the various options.


For a simple 'gui' like interface, from the build directory run:
$ ccmake ../

Pressing 'c' will configure 
Pressing 'g' will generate the make files and exit


If you'd like to be prompted with questions for each option, execute
the following from the build directory:
$ cmake -i ../


From the command-line option, the cmake option -D allows setting Avida
configuration options with the following syntax:
-D<variable name>:<type>=<value>

To completely specify each of the above Avida options, cd into your
build directory and type something like :
$ cmake -DAVD_GUI_NCURSES:BOOL=ON \
  -DAVD_CMDLINE:BOOL=ON \
  -DAVD_UNIT_TESTS:BOOL=OFF \
  -DCMAKE_BUILD_TYPE:STRING=Release \
  path-to-source-directory


V. RUNNING CONSISTENCY TESTS
----------------------------------------------------------------------

With Avida built and 'installed' using CMake (the default for the
'build_avida' script), simply execute the 'run_tests' script:

$ ./run_tests


For a list of useful options accepted by the TestRunner script, supply
the -h option on the command line:

$ ./run_tests -h


The 'builddir' option will be particularly for Xcode users.  This
option will allow the tests to be run on Xcode products without having
to move the files to where the CMake outputs are placed by default.
For example, the default Deployment build can be tested as follows:

$ ./run_tests --builddir=build/Deployment/


VI. DOCUMENTATION
----------------------------------------------------------------------

Helpful usage and code documentation can be found in the HTML files in
the 'documentation' directory.  See index.html.


Revised 2007-09-05 DMB
