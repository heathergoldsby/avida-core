from pyAvidaThreadedDriver import pyAvidaThreadedDriver
from pyMdtr import pyMdtr

import qt

class pyDeleteCheck:
  def __del__(self):
    print "pyDeleteCheck.__del__()"

class pySessionWorkThreadHdlr(qt.QObject):

  def construct(self):
    #self.session_mdl.avida_threaded_driver.construct()
    #XXX self.avida_threaded_driver.construct()
    #XXX self.session_mdl.population = self.avida_threaded_driver.GetPopulation()
    self.session_mdl.population = None

    self.session_mdl.session_mdtr.avida_threaded_driver_mdtr = pyMdtr()
    self.connect(self.session_mdl.session_mdtr.avida_threaded_driver_mdtr, qt.PYSIGNAL("doPauseAvidaSig"), self.doPauseAvidaSlot)
    self.connect(self.session_mdl.session_mdtr.avida_threaded_driver_mdtr, qt.PYSIGNAL("doStartAvidaSig"), self.doStartAvidaSlot)
    self.connect(self.session_mdl.session_mdtr.avida_threaded_driver_mdtr, qt.PYSIGNAL("doUpdateAvidaSig"), self.doUpdateAvidaSlot)
    self.connect(self.session_mdl.session_mdtr.avida_threaded_driver_mdtr, qt.PYSIGNAL("doCloseAvidaSig"), self.doCloseAvidaSlot)

    self.update_ck_timer = qt.QTimer()
    self.connect(self.update_ck_timer, qt.SIGNAL("timeout()"), self.updateCheckSlot)
    self.update_ck_timer.start(100)


  def __init__(self, session_mdl):
    self.session_mdl = session_mdl
    #self.session_mdl.avida_threaded_driver = pyAvidaThreadedDriver(self.session_mdl.avida_core_data.environment)
    self.avida_threaded_driver = pyAvidaThreadedDriver(self.session_mdl.avida_core_data.environment)
    #del self.avida_threaded_driver.thread
    #del self.avida_threaded_driver
    #self.updated_semaphore = self.session_mdl.avida_threaded_driver.updated_semaphore
    #XXX self.updated_semaphore = self.avida_threaded_driver.updated_semaphore
    self.updated_semaphore = None
    self.should_update = False

  def destruct(self):
    print("pySessionWorkThreadHdlr.destruct()...")
    self.session_mdl.session_mdtr.avida_threaded_driver_mdtr.emit(qt.PYSIGNAL("doCloseAvidaSig"),())
    if hasattr(self, "update_ck_timer"):
      self.update_ck_timer.stop()
      del self.update_ck_timer
    else:
      print("pySessionWorkThreadHdlr.destruct() self.update_ck_timer missing.")

    self.disconnect(self.session_mdl.session_mdtr.avida_threaded_driver_mdtr, qt.PYSIGNAL("doPauseAvidaSig"), self.doPauseAvidaSlot)
    self.disconnect(self.session_mdl.session_mdtr.avida_threaded_driver_mdtr, qt.PYSIGNAL("doStartAvidaSig"), self.doStartAvidaSlot)
    self.disconnect(self.session_mdl.session_mdtr.avida_threaded_driver_mdtr, qt.PYSIGNAL("doUpdateAvidaSig"), self.doUpdateAvidaSlot)
    self.disconnect(self.session_mdl.session_mdtr.avida_threaded_driver_mdtr, qt.PYSIGNAL("doCloseAvidaSig"), self.doCloseAvidaSlot)

    if hasattr(self.session_mdl.session_mdtr, "avida_threaded_driver_mdtr"):
      del self.session_mdl.session_mdtr.avida_threaded_driver_mdtr
    else:
      print("pySessionWorkThreadHdlr.destruct() self.session_mdl.session_mdtr.avida_threaded_driver_mdtr missing.")

    if hasattr(self, "updated_semaphore"):
      del self.updated_semaphore
    else:
      print("pySessionWorkThreadHdlr.destruct() self.updated_semaphore missing.")

    #if hasattr(self.session_mdl, "avida_threaded_driver"):
    if hasattr(self, "avida_threaded_driver"):
      #self.session_mdl.avida_threaded_driver.destruct()
      #del self.session_mdl.avida_threaded_driver
      del self.avida_threaded_driver.thread
      del self.avida_threaded_driver
    else:
      #print("pySessionWorkThreadHdlr.destruct() self.session_mdl.avida_threaded_driver missing.")
      print("pySessionWorkThreadHdlr.destruct() self.avida_threaded_driver missing.")

    if hasattr(self, "session_mdl"):
      del self.session_mdl
    else:
      print("pySessionWorkThreadHdlr.destruct() self.session_mdl missing.")

    print("pySessionWorkThreadHdlr.destruct() done.")

  def __del__(self):
    print("pySessionWorkThreadHdlr.__del__()...")
    self.destruct()
    print("pySessionWorkThreadHdlr.__del__() done.")

  def updateCheckSlot(self):
    #if hasattr(self.session_mdl, "avida_threaded_driver"):
    #  if self.session_mdl.avida_threaded_driver.updated_semaphore.acquire(False):
    #    self.session_mdl.session_mdtr.avida_threaded_driver_mdtr.emit(qt.PYSIGNAL("AvidaUpdatedSig"),())
    #    if True == self.should_update:
    #      self.doUpdateAvidaSlot()

    #try:
    #  if self.updated_semaphore.acquire(False):
    #    self.session_mdl.session_mdtr.avida_threaded_driver_mdtr.emit(qt.PYSIGNAL("AvidaUpdatedSig"),())
    #    if True == self.should_update:
    #      self.doUpdateAvidaSlot()
    #except AttributeError:
    #  pass

    #if self.updated_semaphore.acquire(False):
    #  self.session_mdl.session_mdtr.avida_threaded_driver_mdtr.emit(qt.PYSIGNAL("AvidaUpdatedSig"),())
    #  if True == self.should_update:
    #    self.doUpdateAvidaSlot()

    pass
  def doPauseAvidaSlot(self):
    self.should_update = False;

  def doStartAvidaSlot(self):
    self.should_update = True;
    self.doUpdateAvidaSlot()

  def doUpdateAvidaSlot(self):
    try:
      #self.session_mdl.avida_threaded_driver.doUpdate()
      self.avida_threaded_driver.doUpdate()
    except AttributeError:
      pass

  def doStepAvidaSlot(self, cell_id):
    print("doStepAvidaSlot")

  def doCloseAvidaSlot(self):
    #self.session_mdl.avida_threaded_driver.doExit()
    self.avida_threaded_driver.doExit()
    #self.session_mdl.avida_threaded_driver.thread.join()
    if self.avida_threaded_driver.thread.isAlive():
      self.avida_threaded_driver.thread.join()
    else:
      print("pySessionWorkThreadHdlr.doCloseAvidaSlot() thread is dead!")
